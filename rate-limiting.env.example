# Rate Limiting Configuration Example
# Copy these settings to your .env file and adjust as needed

# =============================================================================
# GENERAL RATE LIMITING
# =============================================================================

# Enable/disable rate limiting globally
RATE_LIMIT_ENABLED=true

# General rate limiting (applied to all endpoints unless overridden)
RATE_LIMIT_WINDOW_MS=60000        # 1 minute window
RATE_LIMIT_MAX_REQUESTS=100       # 100 requests per minute

# =============================================================================
# ENDPOINT-SPECIFIC RATE LIMITING
# =============================================================================

# API endpoints (internal/admin endpoints)
RATE_LIMIT_API_WINDOW_MS=60000    # 1 minute window  
RATE_LIMIT_API_MAX_REQUESTS=50    # 50 requests per minute

# Webhook endpoints (external integrations like Fullstory)
RATE_LIMIT_WEBHOOK_WINDOW_MS=60000     # 1 minute window
RATE_LIMIT_WEBHOOK_MAX_REQUESTS=200    # 200 requests per minute (higher volume)

# MCP HTTP endpoints 
RATE_LIMIT_MCP_WINDOW_MS=60000    # 1 minute window
RATE_LIMIT_MCP_MAX_REQUESTS=30    # 30 requests per minute

# MCP tool calls (individual tool executions)
RATE_LIMIT_TOOL_WINDOW_MS=60000   # 1 minute window
RATE_LIMIT_TOOL_MAX_REQUESTS=20   # 20 tool calls per minute

# =============================================================================
# STORAGE BACKEND
# =============================================================================

# Use Redis for distributed rate limiting (recommended for production)
RATE_LIMIT_USE_REDIS=false
RATE_LIMIT_REDIS_URL=redis://localhost:6379

# For production with Redis authentication:
# RATE_LIMIT_REDIS_URL=redis://username:password@your-redis-host:6379

# =============================================================================
# RESPONSE CONFIGURATION
# =============================================================================

# Skip counting successful requests (2xx responses)
RATE_LIMIT_SKIP_SUCCESSFUL=false

# Skip counting failed requests (4xx/5xx responses)  
RATE_LIMIT_SKIP_FAILED=false

# Include rate limit headers in HTTP responses
RATE_LIMIT_INCLUDE_HEADERS=true

# Trust X-Forwarded-For headers (set to true if behind proxy/load balancer)
RATE_LIMIT_TRUST_PROXY=false

# Custom message for rate limit exceeded responses
RATE_LIMIT_MESSAGE=Too many requests, please try again later.

# =============================================================================
# PRODUCTION EXAMPLE CONFIGURATION
# =============================================================================

# For production environments, you might want:
#
# RATE_LIMIT_ENABLED=true
# RATE_LIMIT_WINDOW_MS=300000              # 5 minute windows
# RATE_LIMIT_MAX_REQUESTS=500              # Higher general limits
# RATE_LIMIT_WEBHOOK_MAX_REQUESTS=1000     # High webhook volume
# RATE_LIMIT_MCP_MAX_REQUESTS=100          # Moderate MCP usage
# RATE_LIMIT_TOOL_MAX_REQUESTS=50          # Conservative tool limits
# RATE_LIMIT_USE_REDIS=true                # Distributed storage
# RATE_LIMIT_TRUST_PROXY=true              # Behind load balancer
# RATE_LIMIT_REDIS_URL=redis://redis-cluster:6379

# =============================================================================
# DEVELOPMENT EXAMPLE CONFIGURATION  
# =============================================================================

# For development environments, you might want:
#
# RATE_LIMIT_ENABLED=true
# RATE_LIMIT_WINDOW_MS=60000               # 1 minute windows
# RATE_LIMIT_MAX_REQUESTS=1000             # Very high limits
# RATE_LIMIT_WEBHOOK_MAX_REQUESTS=2000     
# RATE_LIMIT_MCP_MAX_REQUESTS=500
# RATE_LIMIT_TOOL_MAX_REQUESTS=200
# RATE_LIMIT_USE_REDIS=false               # In-memory storage
# RATE_LIMIT_INCLUDE_HEADERS=true          # Helpful for debugging
